name: Test
on:
  pull_request:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      output1: steps.random-color-generator.outputs.SELECTED_COLOR
      
    steps:
    
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          
      - run: echo $LOL
        env:
          LOL: $(date -v-1y -v+1m)
          
      - if: github.event_name == 'pull_request'
        id: changed
        continue-on-error: true
        name: Check if rerre should be tested
        run: "! git diff --quiet HEAD~1 HEAD -- $PATHS"
        env:
          PATHS: rerre
        
      - run: echo ${{steps.changed.outcome}}
      
      - if: steps.changed.outcome == 'success'
        run: echo "it has changed"
        
      - if: steps.changed.outcome == 'failure'
        run: echo "it has not changed"
              
      - if: steps.changed.outcome == 'skipped'
        run: echo "it was skipped"
        
      - run: echo ok
                  
      - id: error
        run: echo ::set-output name=error::"$(continue=true && [[ 'pull_request' == '${{ github.event_name }}' ]] && continue=false; echo $continue)"
      
      - run: echo ${{toJSON(steps.error.outputs.error)}}
      - run: echo ${{fromJSON(steps.error.outputs.error)}}    
          
      - id: erroro
        run: echo ::set-output name=error::"true"
      
      - run: echo ${{toJSON(steps.erroro.outputs.error)}}
      - run: echo ${{fromJSON(steps.erroro.outputs.error)}}
      
      - run: exit 1 
        if: ${{ always() }}
      
      - run: echo lolo
        
      - run: exit 1
        if: ${{ always() }}
    
      - run: echo lolo
        if: ${{ always() }}
           
      - name: Define checkov output format
        id: checkov-format
        run: echo ::set-output name=checkov_output::$(output='d' && [[ 'pull_request' == '${{ github.event_name }}' ]] && output='-o github_failed_only'; echo $output)

      - run: echo "${{ steps.checkov-format.outputs.checkov_output }}"
      
      - run: echo ${{ github.event_name }}
      
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
        
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
        
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
        
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
        
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Set selected color
        run: echo '::set-output name=SELECTED_COLOR::blue'
        id: random-color-generator
        
      - name: Get color
        if: steps.random-color-generator.outputs.SELECTED_COLOR
        run: echo 'The selected color is' ${{steps.random-color-generator.outputs.SELECTED_COLOR}}
